{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthInterface",
            "id": "interface-AuthInterface-68b41f5702bd57491202bfffbec5c871f11ea836be329f21857cff8a94948daf8f4cef39f8d59243917e57f5187b3a21416f3c582345853a8c42c2d1f526120c",
            "file": "src/app/shared/interfaces/auth.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthInterface {\n  email?: string;\n  password: string;\n  phone?: number;\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAppConfig",
            "id": "interface-IAppConfig-4cbab6186986955853eaad9b99adab0f55366814b67e24cdf61fc36402dd7ce11c2a6a34b48ec42880403d8e449d011f3b611c8161cf823126f893981cbcf157",
            "file": "src/app/shared/interfaces/app-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAppConfig {\n  version: number;\n  state: string;\n}\n",
            "properties": [
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAppConfigState",
            "id": "interface-IAppConfigState-e59287dae4d423e94b320e2e9aee81cc1a132fa9d1c0ab68d140927be84c6c03e40dc07d7008961834a5eca98def4fc6d7b8d213c91e64db3a956535774d68e5",
            "file": "src/app/core/store/state/app-config.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAppConfig } from '../../../shared/interfaces/app-config.interface';\n\nexport interface IAppConfigState {\n  config: IAppConfig;\n  isLoading: boolean;\n}\n\nexport const initialAppConfigState: IAppConfigState = {\n  // @ts-ignore\n  config: null,\n  isLoading: false,\n};\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppConfig",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IAppState",
            "id": "interface-IAppState-635d24d8f2fe82523b8f38c11f494ee04975e6091b01fb645ee9dfddbe629e27c30b0d68ae8b30cfbdcfe62795ee79ab314a1345cbe9a1565dfad9debf3c3417",
            "file": "src/app/core/store/state/app.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RouterReducerState } from '@ngrx/router-store';\n\nimport { initialUserDataState, IUserDataState } from './user-data.state';\nimport { IAppConfigState, initialAppConfigState } from './app-config.state';\nimport { IHistoryState, initialHistoryState } from './history.state';\n\nexport interface IAppState {\n  router?: RouterReducerState;\n  user: IUserDataState;\n  history: IHistoryState;\n  config: IAppConfigState,\n}\n\nexport const initialAppState: IAppState = {\n  user: initialUserDataState,\n  config: initialAppConfigState,\n  history: initialHistoryState,\n};\n\nexport function getInitialAppState(): IAppState {\n  return initialAppState;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppConfigState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHistoryState",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterReducerState",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserDataState",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IHistory",
            "id": "interface-IHistory-bbd5feb05ef3077d0b938da84310b37355f11b30a4a31c7bea4e6b803ad74ea24c1f44e7a8d250c9725c2d1fe12496a88c18fa652d73ce88067e8470e0eb1dd1",
            "file": "src/app/shared/interfaces/history.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IHistory {\n  country: string;\n  date: string;\n  doctor: string;\n  description: string;\n}\n",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "doctor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IHistoryState",
            "id": "interface-IHistoryState-838548aabc27fe6538f6f7b1730821cf7e7a4c70da917b44c4cfaa0f1deb907423bf9e046d710a7b2112c87a15b991ddd6f0e005ed31b0aeea7d8a6e54c55e47",
            "file": "src/app/core/store/state/history.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IHistory } from '../../../shared/interfaces/history.interface';\n\nexport interface IHistoryState {\n  history: IHistory[];\n  isLoading: boolean;\n}\n\nexport const initialHistoryState: IHistoryState = {\n  history: [],\n  isLoading: false,\n};\n",
            "properties": [
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHistory[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IUserDataState",
            "id": "interface-IUserDataState-84cb9a117a4b729c3aa6de0db9c18df9ccf0bf5965f8033ac4363f6efeeed5d386c6f8f0a593f8615b6ed8094a410e97c12bb36742aad816ff1a5451913ac59c",
            "file": "src/app/core/store/state/user-data.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { UserDataInterface } from '../../../shared/interfaces/user-data.interface';\n\nexport interface IUserDataState {\n  userData: UserDataInterface;\n  isLoading: boolean;\n  error: any;\n}\n\nexport const initialUserDataState: IUserDataState = {\n  // @ts-ignore\n  userData: null,\n  isLoading: false,\n  error: null,\n};\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDataInterface",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserDataInterface",
            "id": "interface-UserDataInterface-382f84690ed95532aab84be5b799df6999db1c17605fb97987582af26e97c0ae32903589b4bf1b8aae84852f8b1fdb48ae9c67f249a1b4e60359bb69c57abca8",
            "file": "src/app/shared/interfaces/user-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserDataInterface {\n  token: string;\n  user: UserInterface;\n}\n\nexport interface UserInterface {\n  id: number;\n  name: string;\n  phone: number;\n  email: string;\n}\n\nexport const InitialUserData: UserDataInterface = {\n  token: '',\n  user: {\n    id: 0,\n    name: '',\n    phone: 0,\n    email: '',\n  },\n};\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserInterface",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "UserInterface",
            "id": "interface-UserInterface-382f84690ed95532aab84be5b799df6999db1c17605fb97987582af26e97c0ae32903589b4bf1b8aae84852f8b1fdb48ae9c67f249a1b4e60359bb69c57abca8",
            "file": "src/app/shared/interfaces/user-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserDataInterface {\n  token: string;\n  user: UserInterface;\n}\n\nexport interface UserInterface {\n  id: number;\n  name: string;\n  phone: number;\n  email: string;\n}\n\nexport const InitialUserData: UserDataInterface = {\n  token: '',\n  user: {\n    id: 0,\n    name: '',\n    phone: 0,\n    email: '',\n  },\n};\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthApiService",
            "id": "injectable-AuthApiService-067e979d65b95ebaa34e5068dffdc781a1f6a21d70b84dad46f461d016670ac39d1de6fcdc91a7a954eae30c52c1df76d856d4f08417bed93f4a96fddf1dcf87",
            "file": "src/app/shared/api/auth-api.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "appSettings.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "data",
                            "type": "AuthInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserDataInterface>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "AuthInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "AuthInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "AuthInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { appSettings } from '../../core/CONSTANTS';\nimport { AuthInterface } from '../interfaces/auth.interface';\nimport { UserDataInterface } from '../interfaces/user-data.interface';\n\n@Injectable()\nexport class AuthApiService {\n  private apiUrl = appSettings.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  public register(data: AuthInterface): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/auth/doctor/register`, data);\n  }\n\n  public login(data: AuthInterface): Observable<UserDataInterface> {\n    const authData: AuthInterface = {\n      name: data.name,\n      password: data.password,\n    };\n    return this.http.post<UserDataInterface>(`${this.apiUrl}/auth/doctor/login`, authData);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-913e107caa755da3474985281df02a8b02a1c3fd53554475b5b3dd1054dcf51290500beada5888f8fc7746b0a453f2099e633fabefebc4d9405fbad790d452f3",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "jwtToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userData",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "jwtToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userData",
                            "type": "UserInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { SessionInfoService } from './session-info.service';\nimport { UserDataInterface, UserInterface } from '../interfaces/user-data.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private sessionInfo: SessionInfoService,\n    private router: Router,\n  ) {}\n\n  public login(jwtToken: string, userData: UserInterface): void {\n    const user: UserDataInterface = {\n      token: jwtToken,\n      user: userData,\n    };\n    this.sessionInfo.setUserData(user);\n    this.router.navigate(['main']);\n  }\n\n  public isLogin(): boolean {\n    const token = this.sessionInfo.getUserData();\n\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n\n  public logout(): void {\n    this.sessionInfo.removeUserData();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HistoryApiService",
            "id": "injectable-HistoryApiService-c1dd8a464b0589bffb006bd63a329a2357b8028b510655f278182f325a3c0a348f7112a7138de522bb1a145163ffae3226a050905cd55360c76664da254369bb",
            "file": "src/app/shared/api/history-api.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "appSettings.apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createHistoryItem",
                    "args": [
                        {
                            "name": "historyItem",
                            "type": "IHistory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IHistory>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "historyItem",
                            "type": "IHistory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Array<IHistory>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { appSettings } from '../../core/CONSTANTS';\nimport { IHistory } from '../interfaces/history.interface';\n\n@Injectable()\nexport class HistoryApiService {\n  private apiUrl = appSettings.apiUrl;\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  public getAllHistory(): Observable<Array<IHistory>> {\n    return this.http.get<Array<IHistory>>(`${this.apiUrl}/config/history`);\n  }\n\n  public createHistoryItem(historyItem: IHistory): Observable<IHistory> {\n    return this.http.post<IHistory>(`${this.apiUrl}/config/history`, historyItem);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HistoryEffects",
            "id": "injectable-HistoryEffects-6e1ddba1aa7f7784114718610661daeca9905c5453937507c3da60e02521ca466ba22ea8e4609e968e3eb610300505d5ae206225c2394c36f8ae8854aa5bc13d",
            "file": "src/app/core/store/effects/history.effects.ts",
            "properties": [
                {
                    "name": "createHistory$",
                    "defaultValue": "createEffect(() => this.actions.pipe(\n    ofType(historyActions.createHistory),\n    switchMap(({ historyItem }) => this.historyApiService.createHistoryItem(historyItem).pipe(\n      switchMap(() => from([\n        historyActions.historyCreate(),\n      ])),\n    )),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadHistory$",
                    "defaultValue": "createEffect(() => this.actions.pipe(\n    ofType(historyActions.loadHistory),\n    switchMap(() => this.historyApiService.getAllHistory().pipe(\n      switchMap((history: IHistory[]) => from([\n        historyActions.historyLoaded({ history }),\n      ])),\n    )),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { from, switchMap } from 'rxjs';\nimport { ToastrService } from 'ngx-toastr';\n\nimport * as historyActions from '../actions/history.actions';\nimport { HistoryApiService } from '../../../shared/api/history-api.service';\nimport { IHistory } from '../../../shared/interfaces/history.interface';\n\n@Injectable()\nexport class HistoryEffects {\n  loadHistory$ = createEffect(() => this.actions.pipe(\n    ofType(historyActions.loadHistory),\n    switchMap(() => this.historyApiService.getAllHistory().pipe(\n      switchMap((history: IHistory[]) => from([\n        historyActions.historyLoaded({ history }),\n      ])),\n    )),\n  ));\n\n  createHistory$ = createEffect(() => this.actions.pipe(\n    ofType(historyActions.createHistory),\n    switchMap(({ historyItem }) => this.historyApiService.createHistoryItem(historyItem).pipe(\n      switchMap(() => from([\n        historyActions.historyCreate(),\n      ])),\n    )),\n  ));\n\n  constructor(\n    private actions: Actions,\n    private toast: ToastrService,\n    private historyApiService: HistoryApiService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toast",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "historyApiService",
                        "type": "HistoryApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toast",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "historyApiService",
                        "type": "HistoryApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SessionInfoService",
            "id": "injectable-SessionInfoService-9dcf824576c33edf9091edda4bb536d2a7fdb82e86337f3a42ea34d95ed0de8ed179d768a4efe3ebbcd81c45d2820feb7622de530424e80c2f1a893008a0cfc3",
            "file": "src/app/shared/services/session-info.service.ts",
            "properties": [
                {
                    "name": "userDataSelector",
                    "defaultValue": "'userData'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeUserData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setUserData",
                    "args": [
                        {
                            "name": "data",
                            "type": "UserDataInterface",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UserDataInterface",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { UserDataInterface } from '../interfaces/user-data.interface';\n\n@Injectable()\nexport class SessionInfoService {\n  private userDataSelector = 'userData';\n\n  public setUserData(data: UserDataInterface): void {\n    localStorage.setItem(this.userDataSelector, JSON.stringify(data));\n  }\n\n  public getUserData(): string {\n    return localStorage.getItem(this.userDataSelector) || '';\n  }\n\n  public removeUserData(): void {\n    localStorage.removeItem(this.userDataSelector);\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UserDataEffects",
            "id": "injectable-UserDataEffects-8b43a5f42e6fa900865e27ce3f4097e0db811cdbaa9ea564335cdc2b6090c1c1d1e4c3374c51ff907252b8d6e23263979b68dc7fe4bbadb3aeb45796f9a5efb6",
            "file": "src/app/core/store/effects/user-data.effects.ts",
            "properties": [
                {
                    "name": "auth$",
                    "defaultValue": "createEffect(() => this.actions.pipe(\n    ofType(userDataActions.auth),\n    switchMap(({ data }) => this.authApiService.login(data).pipe(switchMap((res) => from([\n      userDataActions.authSuccess({ data: res }),\n    ])), catchError((e) => of(userDataActions.authNotSuccess({ error: e }))))),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "authError$",
                    "defaultValue": "createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.authNotSuccess),\n      withLatestFrom(this.store.select(selectError)),\n      tap((error:any) => {\n        this.toast.error(error.message, 'Login Error', {\n          timeOut: 5000,\n          closeButton: true,\n        });\n      }),\n    ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "register$",
                    "defaultValue": "createEffect(() => this.actions.pipe(\n    ofType(userDataActions.register),\n    switchMap(({ data }) => this.authApiService.register(data).pipe(switchMap(() => from([\n      userDataActions.registerSuccess({ data }),\n    ])), catchError((e) => of(userDataActions.registerNotSuccess({ error: e }))))),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "registerError$",
                    "defaultValue": "createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.registerNotSuccess),\n      withLatestFrom(this.store.select(selectError)),\n      tap((error:any) => {\n        this.toast.error(error.message, 'Registration Error', {\n          timeOut: 5000,\n          closeButton: true,\n        });\n      }),\n    ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "registerSuccess$",
                    "defaultValue": "createEffect(() => this.actions.pipe(\n    ofType(userDataActions.registerSuccess),\n    switchMap(({ data }) => this.authApiService.login(data).pipe(switchMap((res) => from([\n      userDataActions.authSuccess({ data: res }),\n    ])), catchError((e) => of(userDataActions.authNotSuccess({ error: e }))))),\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "setToken$",
                    "defaultValue": "createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.authSuccess),\n      withLatestFrom(this.store.select(selectUserData)),\n      tap((data) => {\n        this.authService.login(data[1].token, data[1].user);\n      }),\n    ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport {\n  catchError, from, of, switchMap, tap, withLatestFrom,\n} from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport { AuthApiService } from '../../../shared/api/auth-api.service';\nimport * as userDataActions from '../actions/user-data.actions';\nimport { AuthService } from '../../../shared/services/auth.service';\nimport { IAppState } from '../state/app.state';\nimport { selectError, selectUserData } from '../selectors/user-data.selectors';\n\n@Injectable()\nexport class UserDataEffects {\n  auth$ = createEffect(() => this.actions.pipe(\n    ofType(userDataActions.auth),\n    switchMap(({ data }) => this.authApiService.login(data).pipe(switchMap((res) => from([\n      userDataActions.authSuccess({ data: res }),\n    ])), catchError((e) => of(userDataActions.authNotSuccess({ error: e }))))),\n  ));\n\n  authError$ = createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.authNotSuccess),\n      withLatestFrom(this.store.select(selectError)),\n      tap((error:any) => {\n        this.toast.error(error.message, 'Login Error', {\n          timeOut: 5000,\n          closeButton: true,\n        });\n      }),\n    ),\n    { dispatch: false },\n  );\n\n  register$ = createEffect(() => this.actions.pipe(\n    ofType(userDataActions.register),\n    switchMap(({ data }) => this.authApiService.register(data).pipe(switchMap(() => from([\n      userDataActions.registerSuccess({ data }),\n    ])), catchError((e) => of(userDataActions.registerNotSuccess({ error: e }))))),\n  ));\n\n  registerSuccess$ = createEffect(() => this.actions.pipe(\n    ofType(userDataActions.registerSuccess),\n    switchMap(({ data }) => this.authApiService.login(data).pipe(switchMap((res) => from([\n      userDataActions.authSuccess({ data: res }),\n    ])), catchError((e) => of(userDataActions.authNotSuccess({ error: e }))))),\n  ));\n\n  registerError$ = createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.registerNotSuccess),\n      withLatestFrom(this.store.select(selectError)),\n      tap((error:any) => {\n        this.toast.error(error.message, 'Registration Error', {\n          timeOut: 5000,\n          closeButton: true,\n        });\n      }),\n    ),\n    { dispatch: false },\n  );\n\n  setToken$ = createEffect(\n    () => this.actions.pipe(\n      ofType(userDataActions.authSuccess),\n      withLatestFrom(this.store.select(selectUserData)),\n      tap((data) => {\n        this.authService.login(data[1].token, data[1].user);\n      }),\n    ),\n    { dispatch: false },\n  );\n\n  constructor(\n    private actions: Actions,\n    private authApiService: AuthApiService,\n    private authService: AuthService,\n    private store: Store<IAppState>,\n    private toast: ToastrService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApiService",
                        "type": "AuthApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toast",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApiService",
                        "type": "AuthApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toast",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-c54c9688e2c4e70072589c7057aa1a20440d6c75ead5e01bfdec6e96564324ee6d426793ef0472f4ea04179c003184f01006e9d0a415725c5670511b9e606a8e",
            "file": "src/app/shared/services/auth-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { AuthService } from './auth.service';\nimport { SessionInfoService } from './session-info.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private sessionInfo: SessionInfoService,\n    private router: Router,\n  ) {}\n\n  public canActivate(): boolean {\n    if (!this.authService.isLogin()) {\n      this.router.navigate(['auth']);\n      return false;\n    }\n\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AccountSettingsComponent",
            "id": "component-AccountSettingsComponent-12b9a2ef6e4e0ce593d16977ac4e86dad0c684e9de8fdb5709a0e4caf56508fc64121512084656ddd9927a214f83fd4c56f759d3e3d4296d3650afcdcbfe558e",
            "file": "src/app/main/account-settings/account-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-settings",
            "styleUrls": [
                "./account-settings.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./account-settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isAccount",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "settingsForm",
                    "defaultValue": "this.fb.group({\n    name: [null, Validators.required],\n    email: [null, Validators.required],\n    phone: [null, Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-account-settings',\n  templateUrl: './account-settings.component.html',\n  styleUrls: ['./account-settings.component.css'],\n})\nexport class AccountSettingsComponent {\n  public isAccount: boolean = true;\n\n  public settingsForm: FormGroup = this.fb.group({\n    name: [null, Validators.required],\n    email: [null, Validators.required],\n    phone: [null, Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n  ) { }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  margin: 0 auto;\n}\n\ninput:invalid {\n  border-color: #900;\n}\n\n.account {\n  width: 100%;\n  padding-top: 20px;\n}\n\n.account-setting {\n  margin: 0 auto;\n  border: 1px solid;\n  border-radius: 15px;\n  width: 350px;\n  height: 455px;\n}\n\n.account-settings {\n  text-align: center;\n  font-size: 25px;\n  margin: 18px auto;\n}\n\n.account-circle {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  border: 2px solid;\n  overflow: hidden;\n  margin-top: 10px;\n}\n\n.account-button {\n  width: 100%;\n  height: 40px;\n  border-radius: 10px;\n  margin-top: 15px;\n  background-color: plum;\n}\n\n.account-setting-button {\n  margin: 0 auto;\n  width: 175px;\n}\n\n.account-main {\n  text-align: center;\n  margin: 0px auto;\n  font-size: 50px;\n  padding-top: 80px;\n  line-height: 45px;\n}\n\n.account-box-email {\n  margin: 0 auto;\n  width: 100%;\n  padding: 0 0;\n  height:30px;\n  border-radius: 10px;\n}\n\n.account-box {\n  margin: 0 auto;\n  width: 270px;\n  margin-top: 4px;\n}\n\n.setting-button {\n  margin: 0px auto;\n  width: 262px;\n  display: flex;\n  flex-direction: row;\n}\n",
                    "styleUrl": "./account-settings.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"isAccount else setting\">\n<p class=\"account-main\"> Настроить аккаунт </p>\n  <div class=\"account\">\n  <div class=\"account-setting\">\n    <div class=\"account-circle\">\n      <img src=\"https://acomics.ru/upload/avatar/id63576-m0f3mi95w4.jpg\" alt=\"\"/>\n    </div>\n    <div class=\"account-settings\">Имя: Настя </div>\n    <div class=\"account-settings\">Почта: test@gmail.com </div>\n    <div class=\"account-settings\">Телефон: 1234 </div>\n    <div class=\"account-setting-button\">\n    <button class=\"account-button\" (click)=\"isAccount=false\">Редактировать аккаунт</button>\n    </div>\n  </div>\n</div>\n</ng-container>\n\n<ng-template #setting>\n  <form [formGroup]=\"settingsForm\">\n  <p class=\"account-main\"> Настроить аккаунт </p>\n  <div class=\"account\">\n    <div class=\"account-setting\">\n      <div class=\"account-circle\">\n        <img src=\"https://acomics.ru/upload/avatar/id63576-m0f3mi95w4.jpg\" alt=\"\"/>\n      </div>\n      <div class=\"account-box\">\n        <label>Имя</label>\n        <input class=\"account-box-email\" formControlName=\"name\" type=\"text\" required>\n        <p *ngIf=\"settingsForm.get('name')?.invalid && settingsForm.get('name')?.touched\">\n          Не указано имя\n        </p>\n      </div>\n      <div class=\"account-box\">\n        <label> Почта</label>\n        <input class=\"account-box-email\" formControlName=\"email\" type=\"email\" required>\n        <p *ngIf=\"settingsForm.get('email')?.invalid && settingsForm.get('email')?.touched\">\n          Не указан email\n        </p>\n      </div>\n      <div class=\"account-box\">\n        <label>Телефон</label>\n        <input class=\"account-box-email\" type=\"phone\" formControlName=\"phone\" required>\n        <p *ngIf=\"settingsForm.get('phone')?.invalid && settingsForm.get('phone')?.touched\">\n          Не указан телефон\n        </p>\n      </div>\n      <div class=\"setting-button\">\n        <button class=\"account-button\" (click)=\"isAccount=true\">Назад</button>\n        <button class=\"account-button\" [disabled]=\"settingsForm.invalid\">Отправить</button>\n      </div>\n    </div>\n  </div>\n  </form>\n</ng-template>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-03269f64ec8751a3da6f79f8458444539089d27a9832dd7f0d76c725ee2a03e7c6785797fb29ac5c808344e8a73046d4737315e204c00fd3a303dc706131beb7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Medical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Medical';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n<app-chat></app-chat>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-396d79c0f66ec9b042680182d2dc3c2fd097738cc3f84143f09dc877b04f4fa9ae4d5e987c0157c36e44f3c10e7097ee132d088a7cbbeddb52ba29605f7242c2",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "auth.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "defaultValue": "this.store.select(selectUserDataLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLogin",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loginForm",
                    "defaultValue": "this.fb.group({\n    name: [null, Validators.required],\n    password: [null, Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "registrationForm",
                    "defaultValue": "this.fb.group({\n    email: [null, Validators.required],\n    password: [null, Validators.required],\n    phone: [null, Validators.required],\n    name: [null, Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "reg",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Router } from '@angular/router';\n\nimport { selectUserDataLoading } from '../core/store/selectors/user-data.selectors';\nimport { AuthApiService } from '../shared/api/auth-api.service';\nimport { AuthService } from '../shared/services/auth.service';\nimport { IAppState } from '../core/store/state/app.state';\nimport * as userDataAction from '../core/store/actions/user-data.actions';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: 'auth.component.html',\n  styleUrls: ['auth.component.css'],\n})\nexport class AuthComponent implements OnInit {\n  isLoading$ = this.store.select(selectUserDataLoading);\n\n  public isLogin: boolean = true;\n\n  public loginForm: FormGroup = this.fb.group({\n    name: [null, Validators.required],\n    password: [null, Validators.required],\n  });\n\n  public registrationForm: FormGroup = this.fb.group({\n    email: [null, Validators.required],\n    password: [null, Validators.required],\n    phone: [null, Validators.required],\n    name: [null, Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private authApiService: AuthApiService,\n    private authService: AuthService,\n    private store: Store<IAppState>,\n    private router: Router,\n  ) {}\n\n  public ngOnInit(): void {\n    if (this.authService.isLogin()) {\n      this.router.navigate(['main']);\n    }\n  }\n\n  public login():void {\n    this.store.dispatch(userDataAction.auth({ data: this.loginForm.value }));\n  }\n\n  public reg(): void {\n    this.store.dispatch(userDataAction.register({ data: this.registrationForm.value }));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-box {\n    margin: 100px auto;\n    width: 450px;\n    height: auto;\n    min-height: 467px;\n    background: black;\n    border-radius: 15px;\n}\n\nh2 {\n    margin: 0 auto;\n    color: white;\n    text-align: center;\n    padding-top: 20px;\n}\n\n.user-box {\n    overflow: hidden;\n    margin: 0 auto;\n    width: 395px;\n    margin-top: 15px;\n}\n\nlabel {\n    color: white;\n}\n\n.login-box button:hover {\n    background: white;\n    color: #000000;\n    border-radius: 5px;\n}\n\n.login-box-email {\n    margin: 0 auto;\n    width: 99%;\n    padding: 0 0;\n    height:38px;\n}\n\n.button-registration {\n    width: 45%;\n    height: 50px;\n    margin: 0 auto;\n}\n\n.button-login {\n    width: auto;\n    margin: 0 auto;\n    margin-top: 31px;\n    display: flex;\n    flex-direction: row;\n}\n\n.button-login-google {\n  width: 400px;\n  border: 2px solid #3996cc;\n  border-radius: 3px;\n  padding: 8px;\n  margin: auto;\n  margin-bottom: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "auth.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authApiService",
                        "type": "AuthApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authApiService",
                        "type": "AuthApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"!(isLoading$ | async) else loading\">\n    <ng-container *ngIf=\"isLogin else registration\">\n        <form [formGroup]=\"loginForm\" class=\"login-box\">\n            <h2>Вход</h2>\n            <div class=\"user-box\">\n                <label>Логин</label>\n                <input class=\"login-box-email\" formControlName=\"name\" type=\"text\">\n            </div>\n            <div class=\"user-box\">\n                <label>Пароль</label>\n                <input class=\"login-box-email\" formControlName=\"password\" type=\"password\">\n            </div>\n            <div class=\"button-login\">\n                <button class=\"button-registration\" (click)=\"login()\" [disabled]=\"loginForm.invalid\">\n                    <span></span>\n                    Подтвердить\n                </button>\n                <button class=\"button-registration\" (click)=\"isLogin = false\">\n                    <span></span>\n                    Регистрация\n                </button>\n            </div>\n          <div class=\"button-login\">\n            <button class=\"button-login-google\">\n              Войти через Google\n            </button>\n          </div>\n        </form>\n    </ng-container>\n\n    <ng-template #registration>\n        <form [formGroup]=\"registrationForm\" class=\"login-box\">\n            <h2>Регистрация </h2>\n            <div class=\"user-box\">\n                <label>Имя</label>\n                <input class=\"login-box-email\" formControlName=\"name\" type=\"text\">\n            </div>\n            <div class=\"user-box\">\n                <label> Почта</label>\n                <input class=\"login-box-email\" formControlName=\"email\" type=\"email\">\n            </div>\n            <div class=\"user-box\">\n                <label>Телефон</label>\n                <input class=\"login-box-email\" formControlName=\"phone\" type=\"phone\">\n            </div>\n            <div class=\"user-box\">\n                <label>Пароль</label>\n                <input class=\"login-box-email\" formControlName=\"password\" type=\"password\">\n            </div>\n            <div class=\"button-login\">\n                <button class=\"button-registration\" (click)=\"reg()\">\n                    <span></span>\n                    Подтвердить\n                </button>\n                <button class=\"button-registration\" (click)=\"isLogin = true\">\n                    <span></span>\n                    Вход\n                </button>\n            </div>\n            <div class=\"button-login\">\n              <button class=\"button-login-google\">\n                    Регестрация через Google\n              </button>\n            </div>\n        </form>\n    </ng-template>\n</ng-container>\n\n<ng-template #loading>\n    <app-loading-spinner></app-loading-spinner>\n</ng-template>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-bf03f5ac7c37eb71ad01728e132abd18bcd7b3f29b531f5a62b8c5eda6394d3474965574f066d4567c2fe3495c403f5976393bf5e93ba5a8f0cd9d0f65fe06eb",
            "file": "src/app/shared/ui-components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css']\n})\nexport class ButtonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button>Test</button>"
        },
        {
            "name": "ChatComponent",
            "id": "component-ChatComponent-1fb62847499e3b9a5a25e6788a391342a93a9b526c2c3adf9b809fa64950c7a4181a569eb999db34bcceb4ff096c35724a13ef319a4cd1da1a45a545276837ae",
            "file": "src/app/main/chat/chat.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chat",
            "styleUrls": [
                "./chat.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chat.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isHide",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css'],\n})\n  export class ChatComponent {\n    public isHide: boolean = false;\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chat-main {\n  height: 350px;\n  width: 285px;\n  position: absolute;\n  right: 0;\n  margin-right: 30px;\n  background-color: white;\n  bottom: 10px;\n  display: flex;\n  flex-direction: column;\n  border: 1px;\n  border-radius: 5px;\n}\n\n.chat-name {\n  padding: 15px;\n  color: white;\n  background-color: #7c65c9;\n  height: 10px;\n  width: 255px;\n  border: 1px;\n  border-radius: 5px 5px 0 0;\n}\n\n.help-message {\n  padding: 10px;\n  background-color: lightgrey;\n  margin-top: 4em;\n  position: absolute;\n  right: 10px;\n  border: 1px;\n  border-radius: 5px;\n}\n\n.question-message {\n  padding: 10px;\n  width: 200px;\n  background-color: #a6a4ab;\n  margin-top: 8em;\n  position: absolute;\n  left: 10px;\n  word-break: keep-all;\n  border: 1px;\n  border-radius: 5px;\n}\n.help-message2 {\n  padding: 10px;\n  background-color: lightgrey;\n  margin-top: 16em;\n  position: absolute;\n  right: 10px;\n  border: 1px;\n  border-radius: 5px;\n}\n",
                    "styleUrl": "./chat.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"chat-main\">\n  <div class=\"chat-name\">\n  Emily Dikinson\n  </div>\n  <div class=\"help-message\">\n    Hello, can I help u today?\n  </div>\n  <div class=\"question-message\">\n    Hi there! Can u send me ur latest offers?<br>11.48\n  </div>\n  <div class=\"help-message2\">\n    Yes of course!<br>\n    11.50\n  </div>\n</div>\n<ng-container *ngIf=\"isHide; else chat\">\n  here you can place chat icon\n</ng-container>\n\n<ng-template #chat>\n  here you can place template for open chat\n</ng-template>\n"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-47ffbd48e5e6cce842fabf00e52b851076de36f83a3d1a2da6d3a5fb806abe7c827e36acf624036f539b3855ba70ce52820b3f9ee8675a5688bcb37512c1f968",
            "file": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [
                "./loading-spinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.css'],\n})\nexport class LoadingSpinnerComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n    width: 100vw;\n    height: calc(100vh - 200px);\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}",
                    "styleUrl": "./loading-spinner.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-86f1c7e76c91fef755588a79c851234f93f98175ec383926b330a7f9c7d79d99ed3a78777c5d2cdca7a9a706f365334967d18823fb6dba65b1a41557ddb8869d",
            "file": "src/app/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: 'main.component.html',\n})\nexport class MainComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<app-menu>\n  <router-outlet></router-outlet>\n</app-menu>\n\n<app-button></app-button>\n"
        },
        {
            "name": "MainPageComponent",
            "id": "component-MainPageComponent-df9f924acab4d882a7c5b292e0d0589d62768ab574db32e10430c064e1f60c36d3fd3f67d3e8cd84dac2ebc33f6dd93720b95d3a24faf933e9ad1113b43ae4db",
            "file": "src/app/main/main-page/main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-page",
            "styleUrls": [
                "./main-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-main-page',\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css'],\n})\nexport class MainPageComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./main-page.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p>main-page works!</p>\n\n"
        },
        {
            "name": "ManagementPageComponent",
            "id": "component-ManagementPageComponent-212b94a74a35d9f38e5c41ae76fcaf3dbc3bd7028d92e7c90c2cb3fda0f8f80da9756e29a4eafbc76c11e9b77284371a6fe5ed71b5446f51ade38ff87a16cfaf",
            "file": "src/app/main/management-page/management-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-management-page",
            "styleUrls": [
                "./management-page.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./management-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "history$",
                    "defaultValue": "this.store.select(selectHistoryData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "this.store.select(selectHistoryLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { IAppState } from '../../core/store/state/app.state';\nimport { selectHistoryData, selectHistoryLoading } from '../../core/store/selectors/history.selectors';\nimport * as historyActions from '../../core/store/actions/history.actions';\n\n@Component({\n  selector: 'app-management-page',\n  templateUrl: './management-page.component.html',\n  styleUrls: ['./management-page.component.css'],\n})\nexport class ManagementPageComponent implements OnInit {\n  isLoading$ = this.store.select(selectHistoryLoading);\n\n  history$ = this.store.select(selectHistoryData);\n\n  constructor(\n    private store: Store<IAppState>,\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(historyActions.loadHistory());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  margin: 0 auto;\n}\n\n.inspection-management {\n  text-align: center;\n  margin: 0px auto;\n  font-size: 50px;\n  padding-top: 80px;\n  line-height: 45px;\n}\n\n.management-border {\n  margin-top: 35px;\n  max-width: 70%;\n  height: auto;\n  border: 1px solid;\n  padding: 10px 0px;\n}\n\n.management-text {\n  height: auto;\n  min-height: 20px;\n  font-size: 20px;\n  margin-top: 15px;\n  text-align: center;\n}\n\n.management-text-b {\n  height: auto;\n  min-height: 20px;\n  font-size: 20px;\n  margin-top: 0px;\n  text-align: center;\n  color: black;\n}\n\na {\n  text-decoration: none;\n}\n\n.management-text-header {\n  height: auto;\n  min-height: 30px;\n  font-size: 36px;\n  margin: 0px auto;\n  text-align: center;\n  font-family: cursive;\n  width: 80%;\n  line-height: 45px;\n}\n\n.empty-data {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./management-page.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"management\">\n  <p class=\"inspection-management\">Сделанные осмотры </p>\n\n  <ng-container *ngIf=\"!(isLoading$ | async); else loading\">\n    <div *ngIf=\"!(history$ | async)?.length\" class=\"empty-data\">\n      <p class=\"management-text\"> There are no any data.</p>\n      <p class=\"management-text\"> But you can add new review</p>\n      <a routerLink=\"/main/user-form\">Провести осмотр</a>\n    </div>\n    <div *ngFor=\"let history of (history$ | async); let i = index\" class=\"management-border\">\n      <p class=\"management-text-header\">Осмотр {{i+1}}</p>\n      <p class=\"management-text\"><b>Страна осмотра:</b><br/>{{history.country}}</p>\n      <p class=\"management-text\"><b>Дата осмотра:</b><br/>{{history.date}}</p>\n      <p class=\"management-text\"><b>Врач</b><br/>{{history.doctor}}</p>\n      <p class=\"management-text\"><b>Описание осмотра:</b><br/>{{history.description}}</p>\n      <a href=\"\"><b><p class=\"management-text-b\">Cм.Анкету</p></b></a>\n    </div>\n  </ng-container>\n\n  <ng-template #loading>\n    <app-loading-spinner></app-loading-spinner>\n  </ng-template>\n</div>\n\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-f2352e2c8ee2fbc8e69270226c123d600e200f81cfba228fd7d59d4d0badd7daccc303dbbe1dc47683c580deaf40b78acbf15d760a84bfa403cbdf3057eecc0a",
            "file": "src/app/main/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "userData",
                    "defaultValue": "InitialUserData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDataInterface",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { SessionInfoService } from '../../shared/services/session-info.service';\nimport {InitialUserData, UserDataInterface} from \"../../shared/interfaces/user-data.interface\";\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css'],\n})\nexport class MenuComponent implements OnInit {\n  public userData: UserDataInterface = InitialUserData;\n\n  constructor(\n    private sessionInfo: SessionInfoService,\n    private router: Router,\n  ) {}\n\n  public ngOnInit(): void {\n    this.userData = JSON.parse(this.sessionInfo.getUserData())\n  }\n\n  public logout(): void {\n    this.sessionInfo.removeUserData();\n    this.router.navigate(['auth']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-container {\n  border: none;\n  height: 100vh;\n  margin-top: 0px;\n  background: none;\n}\n\n.menu-sidenav {\n  padding: 20px;\n}\n\n.menu {\n  width: 100%;\n  height: 70px;\n  background-color: purple;\n  top: 0;\n}\n\n.menu-text {\n  margin-top: -41px;\n  font-size: 30px;\n  color: #ffffff;\n  margin-left: 104px;\n}\n\n.menu-item {\n  display: block;\n  margin-top: 0px;\n  padding: 10px 0px;\n  color: #333;\n  font-family: 'Roboto', sans-serif;\n  font-size: 20px;\n  font-weight: 600;\n  text-decoration: none;\n  margin-left: -30px;\n}\n\n.menu-item-name {\n  color: #333;\n  font-family: 'Roboto', sans-serif;\n  font-size: 20px;\n  font-weight: 600;\n  margin: 0 auto;\n  text-align: center;\n}\n\n.menu-circle {\n  margin: 10px auto -5px;\n  width: 90px;\n  height: 90px;\n  border-radius: 50%;\n  border: 2px solid;\n  overflow: hidden;\n}\n\nul {\n  list-style: none;\n}\n\n.menu-item:hover {\n  background-color: #ffffff;\n}\n\n.menu-sidenav-content {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -0px;\n  position: fixed;\n  width: 100%;\n}\n\n.icon {\n  margin-left: 40px;\n  font-size: 51px;\n  color: white;\n  margin-top: 10px;\n}\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "sessionInfo",
                        "type": "SessionInfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-drawer-container class=\"menu-container\" autosize>\n  <mat-drawer #drawer class=\"menu-sidenav\" mode=\"side\">\n    <div class=\"menu-item-name\"> {{userData.user.name}} </div>\n    <div class=\"menu-circle\">\n      <img src=\"https://acomics.ru/upload/avatar/id63576-m0f3mi95w4.jpg\" alt=\"\"/>\n    </div>\n    <ul>\n      <li><a routerLink=\"/main/main-page\" class=\"menu-item\" >Главная </a></li>\n      <li><a routerLink=\"/main/user-form\" class=\"menu-item\">Провести осмотр</a></li>\n      <li><a routerLink=\"/main/management\" class=\"menu-item\">История осмотров</a></li>\n      <li><a routerLink=\"/main/schedule\" class=\"menu-item\">Мое расписание</a></li>\n      <li><a routerLink=\"/main/account-settings\" class=\"menu-item\">Настроить аккаунт</a></li>\n      <li><a (click)=\"logout()\" class=\"menu-item\">Выход</a></li>\n    </ul>\n  </mat-drawer>\n\n  <div class=\"menu-sidenav-content\">\n    <div class=\"menu\">\n      <mat-icon *ngIf=\"!drawer.opened;else close\" (click)=\"drawer.toggle()\" class=\"icon\">menu</mat-icon>\n      <ng-template #close>\n        <mat-icon (click)=\"drawer.toggle()\" class=\"icon\">close</mat-icon>\n      </ng-template>\n      <p class=\"menu-text\"> Medical Project</p>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</mat-drawer-container>\n"
        },
        {
            "name": "ScheduleComponent",
            "id": "component-ScheduleComponent-fa4f394f153f41dfa36f02f1d3986511059bd1a0ec20ee76efafa10ac441ba75476c9d605ca4bb84c85099f395e04c81486a83a7bf80aa0b84d716c6789306e0",
            "file": "src/app/main/schedule/schedule.components.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule",
            "styleUrls": [
                "./schedule.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-schedule',\n  templateUrl: './schedule.component.html',\n  styleUrls: ['./schedule.component.css'],\n})\nexport class ScheduleComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".schedule-main {\n  text-align: center;\n  margin: 0px auto;\n  font-size: 50px;\n  padding-top: 80px;\n  line-height: 45px;\n}\n",
                    "styleUrl": "./schedule.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<p class=\"schedule-main\">Мое расписание</p>\n<input type=\"date\">\n"
        },
        {
            "name": "UserFormComponent",
            "id": "component-UserFormComponent-1a4a9f2f774384c5ff78693d9445c836fabe85be7fcfd44f14783ac5f59d5fcea4a4a2732fc9472cbe3974eaded04ed1231bb32921dca2d08785f96a9f40c3f3",
            "file": "src/app/main/user-form/user-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-form",
            "styleUrls": [
                "./user-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inspectionForm",
                    "defaultValue": "this.fb.group({\n    country: [null, Validators.required],\n    date: [null, Validators.required],\n    doctor: [null, Validators.required],\n    description: [null, Validators.required],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "this.store.select(selectHistoryLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "createInspection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport * as historyActions from '../../core/store/actions/history.actions';\nimport { IAppState } from '../../core/store/state/app.state';\nimport { selectHistoryLoading } from '../../core/store/selectors/history.selectors';\n\n@Component({\n  selector: 'app-user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.css'],\n})\nexport class UserFormComponent {\n  isLoading$ = this.store.select(selectHistoryLoading);\n\n  public inspectionForm: FormGroup = this.fb.group({\n    country: [null, Validators.required],\n    date: [null, Validators.required],\n    doctor: [null, Validators.required],\n    description: [null, Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<IAppState>,\n    private router: Router,\n  ) { }\n\n  public createInspection():void {\n    this.store.dispatch(historyActions.createHistory({ historyItem: this.inspectionForm.value }));\n    this.router.navigate(['main']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  margin: 0 auto;\n}\n\n.inspections-conducted {\n  padding-top: 50px;\n}\n\n.inspections {\n  text-align: center;\n  font-size: 50px;\n  padding-top: 25px;\n  line-height: 45px;\n}\n\n.inspections-conducted-border {\n  margin-top: 30px;\n  width: 450px;\n  height: 475px;\n  border: 1px solid;\n  display: flex;\n  flex-direction: column;\n}\n\n.inspections-input {\n  width: 200px;\n  height: 50px;\n  text-align: center;\n  font-size: 18px;\n  border-radius: 10px;\n  margin-top: 10px;\n  background-color: white;\n}\n\n.inspections-button {\n  width: 209px;\n  height: 53px;\n  text-align: center;\n  font-size: 18px;\n  border-radius: 10px;\n  margin-top: 19px;\n  background-color: chartreuse;\n}\n\nlabel {\n  font-size: 18px;\n  text-align:center;\n  margin-top: 10px;\n}\n",
                    "styleUrl": "./user-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<IAppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<ng-container *ngIf=\"!(isLoading$ | async) else loading\">\n  <form [formGroup]=\"inspectionForm\" class=\"inspections-conducted\">\n    <p class=\"inspections\"> Провести осмотр</p>\n    <div class=\"inspections-conducted-border\">\n      <label>Страна осмотра:</label> <input type=\"text\" class=\"inspections-input\" formControlName=\"country\">\n      <label>Дата осмотра:</label> <input type=\"date\" class=\"inspections-input\"  min=\"1920-01-01\" max=\"2023-01-01\" formControlName=\"date\">\n      <label>Врач:</label> <input type=\"text\"  class=\"inspections-input\" formControlName=\"doctor\">\n      <label>Описание осмотра:</label> <input type=\"text\" class=\"inspections-input\" formControlName=\"description\">\n      <button class=\"inspections-button\"  (click)=\"createInspection()\" [disabled]=\"inspectionForm.invalid\">\n      Отправить\n      </button>\n    </div>\n  </form>\n</ng-container>\n\n<ng-template #loading>\n  <app-loading-spinner></app-loading-spinner>\n</ng-template>\n"
        },
        {
            "name": "UserInformationComponent",
            "id": "component-UserInformationComponent-a8efbebefc71dd30fb16882efcaa77656f21ff8d883a4d3da7078851ed71dec38d6c2637b2dee556c6e8f30394f5d7205c293f5d1e91f8f9b91191d39043643c",
            "file": "src/app/main/user-information/user-information.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-information",
            "styleUrls": [
                "./user-information.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-information.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-user-information',\n  templateUrl: './user-information.component.html',\n  styleUrls: ['./user-information.component.css'],\n})\nexport class UserInformationComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\n  margin: 0 auto;\n}\n\n.user-information {\n   width: 100%;\n    height: 100vh;\n}\n\n.user-information-circle {\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  border: 2px solid;\n  overflow: hidden;\n}\n\n.user-information-text {\n  height: auto;\n  min-height: 20px;\n  font-size: 50px;\n  padding-top: 88px;\n  text-align: center;\n  line-height: 42px;\n}\n\n.information-text {\n  border: 1px solid;\n  height: 0px;\n  width: 50%;\n  text-align: center;\n  margin-top: 90px;\n}\n\n.information {\n  font-size: 30px;\n  width: 100%;\n  text-align: center;\n  margin: -55px auto;\n  line-height: 25px;\n}\n\n.user-information-border {\n  width: 100%;\n  height: auto;\n  margin-top: 36px;\n}\n",
                    "styleUrl": "./user-information.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"user-information\">\n<p class=\"user-information-text\">Анкета пользователя </p>\n  <div class=\"user-information-border\">\n    <div class=\"user-information-circle\">\n      <img src=\"https://sun1-22.userapi.com/s/v1/if1/X5S1-3jt6JnYSoGlEme1_qfDEyw6YWyN0mlexanIiXSSy8xhcfF467-z5hVgYHECnOzoYYm8.jpg?size=200x200&quality=96&crop=99,0,600,600&ava=1\" alt=\"\"/>\n    </div>\n  <div class=\"information-text\">\n    <p class=\"information\">Имя</p>\n  </div>\n  <div class=\"information-text\">\n    <p class=\"information\">Почта</p>\n  </div>\n  <div class=\"information-text\">\n    <p class=\"information\"> Дата рождения</p>\n  </div>\n  <div class=\"information-text\">\n    <p class=\"information\"> Телефон</p>\n  </div>\n    <div class=\"information-text\">\n      <p class=\"information\"> Страна</p>\n    </div>\n\n    <div class=\"information-text\">\n      <p class=\"information\">Город</p>\n    </div>\n  </div>\n\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-43a18a1384d5dbe370ae99b70ce0d7b022b5a8fa8ad152b60f8adf0e8a0a22dcc41f7feecad4017d9f1a80b317fcfc7e37e2ad01f47e06f26d64b8aadcdf3b29",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule } from '@angular/router';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\nimport { ToastrModule } from 'ngx-toastr';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AuthApiService } from './shared/api/auth-api.service';\nimport { AuthService } from './shared/services/auth.service';\nimport { AuthGuardService } from './shared/services/auth-guard.service';\nimport { SessionInfoService } from './shared/services/session-info.service';\nimport { environment } from '../environments/environment';\nimport { appReducer } from './core/store/reducers/app.reducer';\nimport { UserDataEffects } from './core/store/effects/user-data.effects';\nimport { HistoryEffects } from './core/store/effects/history.effects';\nimport { HistoryApiService } from './shared/api/history-api.service';\nimport { AuthModule } from './auth/auth.module';\nimport { MainModule } from './main/main.module';\nimport { SharedModule } from './shared/shared.module';\n\nconst MedicalImports = [\n  SharedModule,\n  MainModule,\n  AuthModule,\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n  ],\n  imports: [\n    MedicalImports,\n    BrowserModule,\n    RouterModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    StoreModule.forRoot(appReducer),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n    EffectsModule.forRoot([UserDataEffects, HistoryEffects]),\n    StoreRouterConnectingModule.forRoot(),\n    ToastrModule.forRoot(),\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "MainModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-445e2056c9641ffc56ffe932f63204836837fbdfae853a24c58f379d79f858393459684d153526177e08a2ecae8eee4e4f6f027be27de26a7429564fafe4cedb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AuthGuardService } from './shared/services/auth-guard.service';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'auth',\n  },\n  {\n    path: 'auth',\n    loadChildren: () => \"import('./auth/auth.module').then((m) => m.AuthModule)\",\n  },\n  {\n    path: 'main',\n    loadChildren: () => \"import('./main/main.module').then((m) => m.MainModule)\",\n    canActivate: [AuthGuardService],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-620e5054a872b9e24bc50fc29acba65036962ae3709ca7be2b7e8ea5f2c5dd1849d0e582861fe363da253a7f92f2929a53f1dd0f000fbeacbc826d856cf3d554",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { AuthComponent } from './auth.component';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n@NgModule({\n  imports: [\n    AuthRoutingModule,\n    ReactiveFormsModule,\n    SharedModule,\n    CommonModule,\n  ],\n  declarations: [\n    AuthComponent,\n  ],\n})\nexport class AuthModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-69b5953a400902006354e477fe5c10c6dd77fc6ef7d5c141b18a864251bc1f8afebe59fcc022f8dc44f846144884d6d50e3ae808b08ced54f6050305c5d5454b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { AuthComponent } from './auth.component';\n\nexport const authRoutes: Routes = [\n  {\n    path: 'auth',\n    component: AuthComponent,\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'sign-in',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(authRoutes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-b3e2d0277ea57499de7af304ff2dc7803d36c189235e5c3706cb1c97e166db828da6b6046efe4d20dfe3f9615906bcb996af9b7526a54b759a4b16fb04512b03",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { MainRoutingModule } from './main-routing.module';\nimport { MainComponent } from './main.component';\nimport { MenuComponent } from './menu/menu.component';\nimport { UserFormComponent } from './user-form/user-form.component';\nimport { ManagementPageComponent } from './management-page/management-page.component';\nimport { UserInformationComponent } from './user-information/user-information.component';\nimport { MainPageComponent } from './main-page/main-page.component';\nimport { AccountSettingsComponent } from './account-settings/account-settings.component';\nimport { SharedModule } from '../shared/shared.module';\nimport { HistoryApiService } from '../shared/api/history-api.service';\nimport { ScheduleComponent } from './schedule/schedule.components';\nimport { ChatComponent } from './chat/chat.component';\n\n@NgModule({\n  imports: [\n    MainRoutingModule,\n    MatSidenavModule,\n    MatIconModule,\n    CommonModule,\n    ReactiveFormsModule,\n    SharedModule,\n  ],\n  declarations: [\n    MainComponent,\n    MenuComponent,\n    UserFormComponent,\n    ManagementPageComponent,\n    UserInformationComponent,\n    MainPageComponent,\n    AccountSettingsComponent,\n    ScheduleComponent,\n    ChatComponent,\n  ],\n  providers: [\n    HistoryApiService,\n  ],\n  exports: [\n    ChatComponent,\n  ],\n})\nexport class MainModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HistoryApiService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountSettingsComponent"
                        },
                        {
                            "name": "ChatComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "MainPageComponent"
                        },
                        {
                            "name": "ManagementPageComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "ScheduleComponent"
                        },
                        {
                            "name": "UserFormComponent"
                        },
                        {
                            "name": "UserInformationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ChatComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainRoutingModule",
            "id": "module-MainRoutingModule-9a03efdd248c3278cb19fed4828507f8ef61f7027bd74c0c08b2a6dfaeff4116c618a320ecd2df077b71c229330235edb98b3b168d4a878d0c2884f03337fe02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/main/main-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\n\nimport { UserFormComponent } from './user-form/user-form.component';\nimport { AuthGuardService } from '../shared/services/auth-guard.service';\nimport { ManagementPageComponent } from './management-page/management-page.component';\nimport { UserInformationComponent } from './user-information/user-information.component';\nimport { AccountSettingsComponent } from './account-settings/account-settings.component';\nimport { MainComponent } from './main.component';\nimport { MainPageComponent } from './main-page/main-page.component';\nimport {ScheduleComponent} from \"./schedule/schedule.components\";\n\nexport const mainRoutes: Routes = [\n  {\n    path: 'main',\n    component: MainComponent,\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: 'main-page',\n      },\n      {\n        path: 'main-page',\n        component: MainPageComponent,\n      },\n      {\n        path: 'management',\n        component: ManagementPageComponent,\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: 'user-form',\n        component: UserFormComponent,\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: 'management',\n        component: ManagementPageComponent,\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: 'user-information',\n        component: UserInformationComponent,\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: 'account-settings',\n        component: AccountSettingsComponent,\n        canActivate: [AuthGuardService],\n      },\n      {\n        path: 'schedule',\n        component: ScheduleComponent,\n        canActivate: [AuthGuardService],\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(mainRoutes)],\n  exports: [RouterModule],\n})\nexport class MainRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-cd4f6edf6f5395fefa2095353035c482007d71ae81dbc49144dfc1bff52989311b81cf4ee64bdd25dc658a1e3a705f4da1e40bff83c7d934710cf7de96332f0a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { LoadingSpinnerComponent } from './components/loading-spinner/loading-spinner.component';\nimport { AuthApiService } from './api/auth-api.service';\nimport { AuthService } from './services/auth.service';\nimport { AuthGuardService } from './services/auth-guard.service';\nimport { SessionInfoService } from './services/session-info.service';\nimport { UiComponentsModule } from './ui-components/ui-components.module';\n\n@NgModule({\n  imports: [\n    MatProgressSpinnerModule,\n    UiComponentsModule,\n  ],\n  declarations: [\n    LoadingSpinnerComponent,\n  ],\n  exports: [\n    LoadingSpinnerComponent,\n    UiComponentsModule,\n  ],\n  providers: [\n    AuthApiService,\n    AuthService,\n    AuthGuardService,\n    SessionInfoService,\n  ],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthApiService"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "SessionInfoService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UiComponentsModule",
            "id": "module-UiComponentsModule-1d050ad30fe78c3eb847675bd8599435a2d1717223eff91c9b158ff7c6f442a4c08044d6558df862d341f1f57ca804ee4c9661150d0a2a4add0d2d9d31b8742f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/ui-components/ui-components.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button/button.component';\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n  ],\n  exports: [\n    ButtonComponent,\n  ],\n})\nexport class UiComponentsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfigReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/config.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer<IAppConfigState>(\n  initialAppConfigState,\n\n  // Auth\n  on(appConfigActions.config, (state) => ({ ...state, isLoading: true })),\n  on(appConfigActions.configSuccess, (state, { appConfig }) => ({\n    ...state,\n    isLoading: false,\n    appConfig,\n  })),\n  on(appConfigActions.configNotSuccess, (state) => ({ ...state, isLoading: false })),\n)"
            },
            {
                "name": "appReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/app.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<IAppState, any>",
                "defaultValue": "{\n  router: routerReducer,\n  user: userDataReducer,\n  history: historyReducer,\n  config: appConfigReducer,\n}"
            },
            {
                "name": "appSettings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/CONSTANTS.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  apiUrl: 'https://hidden-lake-66781.herokuapp.com/api',\n}"
            },
            {
                "name": "auth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Auth', props<{ data: AuthInterface }>())"
            },
            {
                "name": "authNotSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Auth Not Success', props<{ error: any }>())"
            },
            {
                "name": "authSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Auth Success', props<{ data: UserDataInterface }>())"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-config.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Config] Get Config')"
            },
            {
                "name": "configNotSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-config.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Config] Get Config Not Success')"
            },
            {
                "name": "configSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-config.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Config] Get Config Success', props<{ appConfig: IAppConfig }>())"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "createHistory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] Creat History', props<{ historyItem: IHistory }>())"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "historyCreate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] History Create')"
            },
            {
                "name": "historyLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] History Loaded', props<{ history: IHistory[] }>())"
            },
            {
                "name": "historyNotCreate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] History Not Create')"
            },
            {
                "name": "historyNotLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] History Not Loaded')"
            },
            {
                "name": "historyReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/history.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer<IHistoryState>(\n  initialHistoryState,\n\n  // Load History\n  on(historyActions.loadHistory, (state) => ({ ...state, isLoading: true })),\n  on(historyActions.historyLoaded, (state, { history }) => ({\n    ...state,\n    history,\n    isLoading: false,\n  })),\n  on(historyActions.historyNotLoaded, (state) => ({ ...state, isLoading: false })),\n\n  // Create History\n  on(historyActions.createHistory, (state) => ({ ...state, isLoading: true })),\n  on(historyActions.createHistory, (state) => ({ ...state, isLoading: false })),\n  on(historyActions.historyNotCreate, (state) => ({ ...state, isLoading: false })),\n)"
            },
            {
                "name": "initialAppConfigState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/app-config.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IAppConfigState",
                "defaultValue": "{\n  // @ts-ignore\n  config: null,\n  isLoading: false,\n}"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/app.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IAppState",
                "defaultValue": "{\n  user: initialUserDataState,\n  config: initialAppConfigState,\n  history: initialHistoryState,\n}"
            },
            {
                "name": "initialHistoryState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/history.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IHistoryState",
                "defaultValue": "{\n  history: [],\n  isLoading: false,\n}"
            },
            {
                "name": "InitialUserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/interfaces/user-data.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UserDataInterface",
                "defaultValue": "{\n  token: '',\n  user: {\n    id: 0,\n    name: '',\n    phone: 0,\n    email: '',\n  },\n}"
            },
            {
                "name": "initialUserDataState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/user-data.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IUserDataState",
                "defaultValue": "{\n  // @ts-ignore\n  userData: null,\n  isLoading: false,\n  error: null,\n}"
            },
            {
                "name": "loadHistory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/history.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[History] Load History')"
            },
            {
                "name": "MedicalImports",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  SharedModule,\n  MainModule,\n  AuthModule,\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    label: 'Button',\n    backgroundColor: '#ff0',\n  },\n})"
            },
            {
                "name": "register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Register', props<{ data: AuthInterface }>())"
            },
            {
                "name": "registerNotSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Register Not Success', props<{ error: any }>())"
            },
            {
                "name": "registerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/user-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Login] Register Success', props<{ data: AuthInterface }>())"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    label: '😄👍😍💯',\n    backgroundColor: '#ff0',\n  },\n})"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/user-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.error,\n)"
            },
            {
                "name": "selectHistory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/history.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: IAppState) => state.history"
            },
            {
                "name": "selectHistoryData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/history.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectHistory,\n  (state: IHistoryState) => state.history,\n)"
            },
            {
                "name": "selectHistoryLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/history.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectHistory,\n  (state: IHistoryState) => state.isLoading,\n)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/user-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: IAppState) => state.user"
            },
            {
                "name": "selectUserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/user-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.userData,\n)"
            },
            {
                "name": "selectUserDataLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/user-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.isLoading,\n)"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/ui-components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    label: '📚📕📈🤓',\n    backgroundColor: '#ff0',\n  },\n})"
            },
            {
                "name": "userDataReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/user-data.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer<IUserDataState>(\n  initialUserDataState,\n\n  // Auth\n  on(userDataActions.auth, (state) => ({ ...state, isLoading: true })),\n  on(userDataActions.authSuccess, (state, { data }) => ({\n    ...state,\n    isLoading: false,\n    userData: data,\n  })),\n  on(userDataActions.authNotSuccess, (state, { error }) => ({\n    ...state,\n    isLoading: false,\n    error,\n  })),\n  on(userDataActions.registerNotSuccess, (state, { error }) => ({\n    ...state,\n    isLoading: false,\n    error,\n  })),\n\n  // Register\n  on(userDataActions.register, (state) => ({ ...state, isLoading: true })),\n  on(userDataActions.registerSuccess, (state) => ({ ...state, isLoading: false })),\n  on(userDataActions.registerNotSuccess, (state) => ({ ...state, isLoading: false })),\n)"
            }
        ],
        "functions": [
            {
                "name": "getInitialAppState",
                "file": "src/app/core/store/state/app.state.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "IAppState"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/core/store/reducers/config.reducer.ts": [
                {
                    "name": "appConfigReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/config.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer<IAppConfigState>(\n  initialAppConfigState,\n\n  // Auth\n  on(appConfigActions.config, (state) => ({ ...state, isLoading: true })),\n  on(appConfigActions.configSuccess, (state, { appConfig }) => ({\n    ...state,\n    isLoading: false,\n    appConfig,\n  })),\n  on(appConfigActions.configNotSuccess, (state) => ({ ...state, isLoading: false })),\n)"
                }
            ],
            "src/app/core/store/reducers/app.reducer.ts": [
                {
                    "name": "appReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/app.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<IAppState, any>",
                    "defaultValue": "{\n  router: routerReducer,\n  user: userDataReducer,\n  history: historyReducer,\n  config: appConfigReducer,\n}"
                }
            ],
            "src/app/core/CONSTANTS.ts": [
                {
                    "name": "appSettings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/CONSTANTS.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  apiUrl: 'https://hidden-lake-66781.herokuapp.com/api',\n}"
                }
            ],
            "src/app/core/store/actions/user-data.actions.ts": [
                {
                    "name": "auth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Auth', props<{ data: AuthInterface }>())"
                },
                {
                    "name": "authNotSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Auth Not Success', props<{ error: any }>())"
                },
                {
                    "name": "authSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Auth Success', props<{ data: UserDataInterface }>())"
                },
                {
                    "name": "register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Register', props<{ data: AuthInterface }>())"
                },
                {
                    "name": "registerNotSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Register Not Success', props<{ error: any }>())"
                },
                {
                    "name": "registerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/user-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Login] Register Success', props<{ data: AuthInterface }>())"
                }
            ],
            "src/app/core/store/actions/app-config.actions.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-config.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Config] Get Config')"
                },
                {
                    "name": "configNotSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-config.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Config] Get Config Not Success')"
                },
                {
                    "name": "configSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-config.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Config] Get Config Success', props<{ appConfig: IAppConfig }>())"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/core/store/actions/history.actions.ts": [
                {
                    "name": "createHistory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] Creat History', props<{ historyItem: IHistory }>())"
                },
                {
                    "name": "historyCreate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] History Create')"
                },
                {
                    "name": "historyLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] History Loaded', props<{ history: IHistory[] }>())"
                },
                {
                    "name": "historyNotCreate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] History Not Create')"
                },
                {
                    "name": "historyNotLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] History Not Loaded')"
                },
                {
                    "name": "loadHistory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/history.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[History] Load History')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "src/app/core/store/reducers/history.reducer.ts": [
                {
                    "name": "historyReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/history.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer<IHistoryState>(\n  initialHistoryState,\n\n  // Load History\n  on(historyActions.loadHistory, (state) => ({ ...state, isLoading: true })),\n  on(historyActions.historyLoaded, (state, { history }) => ({\n    ...state,\n    history,\n    isLoading: false,\n  })),\n  on(historyActions.historyNotLoaded, (state) => ({ ...state, isLoading: false })),\n\n  // Create History\n  on(historyActions.createHistory, (state) => ({ ...state, isLoading: true })),\n  on(historyActions.createHistory, (state) => ({ ...state, isLoading: false })),\n  on(historyActions.historyNotCreate, (state) => ({ ...state, isLoading: false })),\n)"
                }
            ],
            "src/app/core/store/state/app-config.state.ts": [
                {
                    "name": "initialAppConfigState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/app-config.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppConfigState",
                    "defaultValue": "{\n  // @ts-ignore\n  config: null,\n  isLoading: false,\n}"
                }
            ],
            "src/app/core/store/state/app.state.ts": [
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/app.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAppState",
                    "defaultValue": "{\n  user: initialUserDataState,\n  config: initialAppConfigState,\n  history: initialHistoryState,\n}"
                }
            ],
            "src/app/core/store/state/history.state.ts": [
                {
                    "name": "initialHistoryState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/history.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IHistoryState",
                    "defaultValue": "{\n  history: [],\n  isLoading: false,\n}"
                }
            ],
            "src/app/shared/interfaces/user-data.interface.ts": [
                {
                    "name": "InitialUserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/interfaces/user-data.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserDataInterface",
                    "defaultValue": "{\n  token: '',\n  user: {\n    id: 0,\n    name: '',\n    phone: 0,\n    email: '',\n  },\n}"
                }
            ],
            "src/app/core/store/state/user-data.state.ts": [
                {
                    "name": "initialUserDataState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/user-data.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUserDataState",
                    "defaultValue": "{\n  // @ts-ignore\n  userData: null,\n  isLoading: false,\n  error: null,\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "MedicalImports",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  SharedModule,\n  MainModule,\n  AuthModule,\n]"
                }
            ],
            "src/app/shared/ui-components/button/button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    label: 'Button',\n    backgroundColor: '#ff0',\n  },\n})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    label: '😄👍😍💯',\n    backgroundColor: '#ff0',\n  },\n})"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/ui-components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    label: '📚📕📈🤓',\n    backgroundColor: '#ff0',\n  },\n})"
                }
            ],
            "src/app/core/store/selectors/user-data.selectors.ts": [
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/user-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.error,\n)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/user-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: IAppState) => state.user"
                },
                {
                    "name": "selectUserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/user-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.userData,\n)"
                },
                {
                    "name": "selectUserDataLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/user-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (state: IUserDataState) => state.isLoading,\n)"
                }
            ],
            "src/app/core/store/selectors/history.selectors.ts": [
                {
                    "name": "selectHistory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/history.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: IAppState) => state.history"
                },
                {
                    "name": "selectHistoryData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/history.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectHistory,\n  (state: IHistoryState) => state.history,\n)"
                },
                {
                    "name": "selectHistoryLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/history.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectHistory,\n  (state: IHistoryState) => state.isLoading,\n)"
                }
            ],
            "src/app/core/store/reducers/user-data.reducer.ts": [
                {
                    "name": "userDataReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/user-data.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer<IUserDataState>(\n  initialUserDataState,\n\n  // Auth\n  on(userDataActions.auth, (state) => ({ ...state, isLoading: true })),\n  on(userDataActions.authSuccess, (state, { data }) => ({\n    ...state,\n    isLoading: false,\n    userData: data,\n  })),\n  on(userDataActions.authNotSuccess, (state, { error }) => ({\n    ...state,\n    isLoading: false,\n    error,\n  })),\n  on(userDataActions.registerNotSuccess, (state, { error }) => ({\n    ...state,\n    isLoading: false,\n    error,\n  })),\n\n  // Register\n  on(userDataActions.register, (state) => ({ ...state, isLoading: true })),\n  on(userDataActions.registerSuccess, (state) => ({ ...state, isLoading: false })),\n  on(userDataActions.registerNotSuccess, (state) => ({ ...state, isLoading: false })),\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/store/state/app.state.ts": [
                {
                    "name": "getInitialAppState",
                    "file": "src/app/core/store/state/app.state.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "IAppState"
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "pathMatch": "full",
                        "redirectTo": "auth"
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule"
                    },
                    {
                        "path": "main",
                        "loadChildren": "./main/main.module#MainModule",
                        "canActivate": [
                            "AuthGuardService"
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "authRoutes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "auth",
                        "component": "AuthComponent",
                        "children": [
                            {
                                "path": "",
                                "pathMatch": "full",
                                "redirectTo": "sign-in"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "mainRoutes",
                "filename": "src/app/main/main-routing.module.ts",
                "module": "MainRoutingModule",
                "children": [
                    {
                        "path": "main",
                        "component": "MainComponent",
                        "children": [
                            {
                                "path": "",
                                "pathMatch": "full",
                                "redirectTo": "main-page"
                            },
                            {
                                "path": "main-page",
                                "component": "MainPageComponent"
                            },
                            {
                                "path": "management",
                                "component": "ManagementPageComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "user-form",
                                "component": "UserFormComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "management",
                                "component": "ManagementPageComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "user-information",
                                "component": "UserInformationComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "account-settings",
                                "component": "AccountSettingsComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            },
                            {
                                "path": "schedule",
                                "component": "ScheduleComponent",
                                "canActivate": [
                                    "AuthGuardService"
                                ]
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MedicalImports",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/CONSTANTS.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appSettings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-config.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-config.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configNotSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-config.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createHistory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyCreate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyNotCreate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyNotLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/history.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadHistory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "auth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authNotSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerNotSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/user-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/history.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HistoryEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/user-data.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserDataEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/config.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfigReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/history.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "historyReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/user-data.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userDataReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/history.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHistory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/history.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHistoryData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/history.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHistoryLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/user-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/user-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/user-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/user-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserDataLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-config.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppConfigState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-config.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppConfigState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app.state.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getInitialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/history.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHistoryState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/history.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialHistoryState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/user-data.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserDataState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/user-data.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialUserDataState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/account-settings/account-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/main/chat/chat.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main-page/main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/management-page/management-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ManagementPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/schedule/schedule.components.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-form/user-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/main/user-information/user-information.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserInformationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/api/auth-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/api/history-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HistoryApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/app-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAppConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/auth.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthInterface",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/history.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHistory",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDataInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserInterface",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interfaces/user-data.interface.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InitialUserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/session-info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SessionInfoService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/ui-components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}